{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/06/27/hello-world/"},{"title":"Python多线程","text":"Python多线程总结multiprocessing.Pool 只是用来启动多个进程而不是在每个core上启动一个进程。换句话说Python解释器本身不会去在每个core或者processor去做负载均衡。这个是由操作系统决定的。如果你的工作特别的计算密集型的话，操作系统确实会分配更多的core，但这也不是Python或者代码所能控制的或指定的。multiprocessing.Pool(num)中的num可以很小也可以很大,比如I/O密集型的操作，这个值完全可以大于cpu的个数。硬件系统的资源分配是由操作系统决定的，如果你希望每个core都在工作，就需要更多的从操作系统出发了。 tips作为脚本运行时，首先添加 if__name__==”main“ 在Windows下运行时，需要添加freeze_support()multiprocessing根据平台不同会执行不同的代码：在类UNIX系统下由于操作系统本身支持fork()语句，win32系统由于本身不支持fork()，因此在两种系统下multiprocessing会运行不同的代码。 123456789101112131415161718192021from multiprocessing import Poolimport os, time, randomdef long_time_task(name): #执行函数 print(&apos;run task %s (%s)...&apos;% (name,os.getpid())) start = time.time() time.sleep(random.random()*3) #random()生成0-1之间的随即实数 end = time.time() print(&apos;task %s run %0.2f seconds.&apos;% (name,end-start)) if __name__ ==&apos;__main__&apos;: print(&apos;parents process %s.&apos;% os.getpid()) p = Pool(4) #意为设定同时进行的子进程数,在一个进程池内,根据cpu核数进行的. for i in range(8): #为8个进程提供name 0,1,2,3,4,5,6,7 p.apply_async(long_time_task, args = (i,)) #apply_async()方法下面说明 print(&apos;waiting for all subprocesses done...&apos;) p.close() #关闭进程池,不在接收新的任务 p.join() print(&apos;all subprocesses done&apos;)#apply_async(func[,args[,kwds[,callback = None]]]) #非阻塞且支持结果返回进行回调#apply_async(函数,不定参数) #四个进程在Pool进程池内并行(分给4核cpu),剩下的交替进行 if__name__==”main“在Python有关main的文档中说明“main”是代码执行时的最高的命名空间（the name of the scope in which top-level code executes），当代码被当做脚本读入的时候，命名空间会被命名为“main”，对于在脚本运行过程中读入的代码命名空间都不会被命名为“main”。这也就是说创建的子进程是不会读取name==”main“保护下的代码。","link":"/2019/07/01/python多线程/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"}],"categories":[]}